conflict_prefer("replace", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("relocate", "dplyr")
conflict_prefer("select", "dplyr")
setwd <- setwd("C:/Users/gasto/Documents/GitHub/Statjunior/projets-r-statjunior/smic-smb/")
###Functions
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1:-2,]
}
empty <- function(df) {
empty_columns <- colSums(is.na(df) | df== "") == nrow(df)
df <- df[,!empty_columns]
}
scale_2019t4 <- function(x, na.rm = FALSE) x/x[base_salaires[,1] == "2019-12-01"]*100
scale_2005t3 <- function(x, na.rm = FALSE) x/x[historique_sal_smb_smic[,1] == "2005-09-01"]*100
scale_2017t2 <- function(x, na.rm = FALSE) x/x[base_salaires[,1] == "2017-06-01"]*100
scale_2017t2_histo <- function(x, na.rm = FALSE) x/x[histo_smb[,1] == "2017-06-01"]*100
scale_2017t2_smic <- function(x, na.rm = FALSE) x/x[smic_analyse[,1] == "2017-06-01"]*100
scale_2017t2_ipc<- function(x, na.rm = FALSE) x/x[ipc_analyse[,1] == "2017-06-01"]*100
scale_2015_histo_ipc <- function(x, na.rm = FALSE) x/((x[histo_ipc[,1] == "2015-03-01"]+x[histo_ipc[,1] == "2015-06-01"]+x[histo_ipc[,1] == "2015-09-01"]+x[histo_ipc[,1] == "2015-12-01"])/4)*100
scale_salaire_reel <- function(x, na.rm = FALSE) x/x[base_salaires["ipc",]]*100
###Fichiers à télécharger
###SMB Dares : à télécharger tous les trimestres...
smb <- read_excel("Dares_serie_salaire_de_base_t4_2022.xlsx",
sheet = "Sal. mens. ensemble", skip = 5)
smbo <- read_excel("Dares_serie_salaire_de_base_t4_2022.xlsx", sheet ="Sal. mens. ouv.",
skip = 5)
smbe <- read_excel("Dares_serie_salaire_de_base_t4_2022.xlsx", sheet ="Sal. mens. emp.",
skip = 5)
smbpi <- read_excel("Dares_serie_salaire_de_base_t4_2022.xlsx", sheet ="Sal. mens. PI",
skip = 5)
smbc <- read_excel("Dares_serie_salaire_de_base_t4_2022.xlsx", sheet ="Sal. mens. cadres",
skip = 5)
indice_fp <- read_excel("indice_fp.xlsx")|>
rename(OBS_VALUE = cum_fp_1970)
histo_smb <- read_excel("historique_smb_detail.xlsx")
histo_ipc <- read_excel("ipc_histo.xlsx") |>
rename(OBS_VALUE = cum_inf_1990)
###Smic et IPC insee
smic <- get_insee_idbank('000879878')
ipc <- get_insee_idbank('001769682')
###SMBS
smbs <- as.data.frame(t(smb))
smbs <- header.true(smbs)
smbs <- empty(smbs)
smbs <- smbs |>
rename(year = 1, smbs = ENS) |>
mutate(year=substr(year, 1, 4)) |>
select(year, smbs) |>
mutate(mois = row_number()) |>
filter(year !="3 mois" | year !="6 mois"| year !="12 mois") |>
mutate(mois = mois %%4) |>
mutate(mois = case_when(
mois == 0 ~ "03-01",
mois == 1 ~ "06-01",
mois == 2 ~ "09-01",
mois == 3 ~ "12-01",
)) |>
mutate(DATE = paste0(year, "-",mois)) |>
select(-year, -mois) |>
mutate(DATE = as.Date(DATE)) |>
relocate(DATE, .before = NULL) |>
filter(!is.na(DATE))
###SMB ouvrier
smbo <- as.data.frame(t(smbo))
smbo <- header.true(smbo)
smbo <- empty(smbo)
smbo <- smbo |>
rename(year = 1, smbo = ENS) |>
select(year, smbo) |>
mutate(year=substr(year, 1, 4)) |>
mutate(mois = row_number()) |>
filter(year !="3 mois" | year !="6 mois"| year !="12 mois") |>
mutate(mois = mois %%4) |>
mutate(mois = case_when(
mois == 0 ~ "03-01",
mois == 1 ~ "06-01",
mois == 2 ~ "09-01",
mois == 3 ~ "12-01",
)) |>
mutate(DATE = paste0(year, "-",mois)) |>
select(-year, -mois) |>
mutate(DATE = as.Date(DATE)) |>
relocate(DATE, .before = NULL) |>
filter(!is.na(DATE))
###SMB cadre
smbc <- as.data.frame(t(smbc))
smbc <- header.true(smbc)
smbc <- empty(smbc)
smbc <- smbc |>
rename(year = 1, smbc = ENS) |>
select(year, smbc) |>
mutate(year=substr(year, 1, 4)) |>
mutate(mois = row_number()) |>
filter(year !="3 mois" | year !="6 mois"| year !="12 mois") |>
mutate(mois = mois %%4) |>
mutate(mois = case_when(
mois == 0 ~ "03-01",
mois == 1 ~ "06-01",
mois == 2 ~ "09-01",
mois == 3 ~ "12-01",
)) |>
mutate(DATE = paste0(year, "-",mois)) |>
select(-year, -mois) |>
mutate(DATE = as.Date(DATE)) |>
relocate(DATE, .before = NULL) |>
filter(!is.na(DATE))
###SMB PI
smbpi <- as.data.frame(t(smbpi))
smbpi <- header.true(smbpi)
smbpi <- empty(smbpi)
smbpi <- smbpi |>
rename(year = 1, smbpi = ENS) |>
select(year, smbpi) |>
mutate(year=substr(year, 1, 4)) |>
mutate(mois = row_number()) |>
filter(year !="3 mois" | year !="6 mois"| year !="12 mois") |>
mutate(mois = mois %%4) |>
mutate(mois = case_when(
mois == 0 ~ "03-01",
mois == 1 ~ "06-01",
mois == 2 ~ "09-01",
mois == 3 ~ "12-01",
)) |>
mutate(DATE = paste0(year, "-",mois)) |>
select(-year, -mois) |>
mutate(DATE = as.Date(DATE)) |>
relocate(DATE, .before = NULL) |>
filter(!is.na(DATE))
###SMB Employés
smbe <- as.data.frame(t(smbe))
smbe <- header.true(smbe)
smbe <- empty(smbe)
smbe <- smbe |>
rename(year = 1, smbe = ET) |>
select(year, smbe) |>
mutate(year=substr(year, 1, 4)) |>
mutate(smbe = ifelse(year=="2023", 114,smbe)) |>
mutate(mois = row_number()) |>
filter(year !="3 mois" | year !="6 mois"| year !="12 mois") |>
mutate(mois = mois %%4) |>
mutate(mois = case_when(
mois == 0 ~ "03-01",
mois == 1 ~ "06-01",
mois == 2 ~ "09-01",
mois == 3 ~ "12-01",
)) |>
mutate(DATE = paste0(year, "-",mois)) |>
select(-year, -mois) |>
mutate(DATE = as.Date(DATE)) |>
relocate(DATE, .before = NULL) |>
filter(!is.na(DATE))
###SMB secteur
smb_secteur <- as.data.frame(t(smb))
smb_secteur<- header.true(smb_secteur)
smb_secteur <- empty(smb_secteur)
smb_secteur <- smb_secteur |>
rename(year = 1, smb_industrie = ET, smb_construction=EU, smb_tertiaire=EV) |>
mutate(year=substr(year, 1, 4)) |>
select(year, smb_industrie, smb_construction, smb_tertiaire) |>
mutate(mois = row_number()) |>
filter(year !="3 mois" | year !="6 mois"| year !="12 mois") |>
mutate(mois = mois %%4) |>
mutate(mois = case_when(
mois == 0 ~ "03-01",
mois == 1 ~ "06-01",
mois == 2 ~ "09-01",
mois == 3 ~ "12-01",
)) |>
mutate(DATE = paste0(year, "-",mois)) |>
select(-year, -mois) |>
mutate(DATE = as.Date(DATE)) |>
relocate(DATE, .before = NULL) |>
filter(!is.na(DATE))
###SMIC
smic_analyse <- select(smic, DATE, OBS_VALUE) |>
mutate(trim = ifelse(substr(DATE, 6, 7) == "03" | substr(DATE, 6, 7) == "06"
| substr(DATE, 6, 7) == "09" | substr(DATE, 6, 7) == "12",1,0  )) |>
arrange(DATE) |>
mutate(smic_trim = (OBS_VALUE+lag(OBS_VALUE,1)+lag(OBS_VALUE, 2))/3) |>
filter(trim == 1) |>
select(-trim, -OBS_VALUE) |>
rename(smic = smic_trim)
###IPC
ipc_analyse <- select(ipc, DATE, OBS_VALUE) |>
mutate(trim = ifelse(substr(DATE, 6, 7) == "03" | substr(DATE, 6, 7) == "06"
| substr(DATE, 6, 7) == "09" | substr(DATE, 6, 7) == "12",1,0  )) |>
arrange(DATE) |>
mutate(ipc_trim = (OBS_VALUE+lag(OBS_VALUE,1)+lag(OBS_VALUE, 2))/3) |>
filter(trim == 1) |>
select(-trim, -OBS_VALUE) |>
rename(ipc = ipc_trim)
###Point d'indice
indice_fp <- select(indice_fp, DATE, OBS_VALUE) |>
mutate(trim = ifelse(substr(DATE, 6, 7) == "03" | substr(DATE, 6, 7) == "06"
| substr(DATE, 6, 7) == "09" | substr(DATE, 6, 7) == "12",1,0  )) |>
arrange(DATE) |>
mutate(indice_fp_trim = (OBS_VALUE+lag(OBS_VALUE,1)+lag(OBS_VALUE, 2))/3) |>
filter(trim == 1) |>
select(-trim, -OBS_VALUE) |>
rename(indice_fp = indice_fp_trim)
###Histo IPC
histo_ipc <- select(histo_ipc, DATE, OBS_VALUE) |>
mutate(trim = ifelse(substr(DATE, 6, 7) == "03" | substr(DATE, 6, 7) == "06"
| substr(DATE, 6, 7) == "09" | substr(DATE, 6, 7) == "12",1,0  )) |>
arrange(DATE) |>
mutate(histo_ipc_trim = (OBS_VALUE+lag(OBS_VALUE,1)+lag(OBS_VALUE, 2))/3) |>
filter(trim == 1) |>
select(-trim, -OBS_VALUE) |>
rename(histo_ipc = histo_ipc_trim) |>
mutate(DATE = as.Date(DATE))
histo_ipc <- mutate_at(histo_ipc, vars(-1), scale_2015_histo_ipc)
histo_ipc <- filter(histo_ipc, DATE <as.Date("1990-03-01"))
histo_ipc <- rename(histo_ipc, ipc=histo_ipc)
histo_ipc <- rbind(histo_ipc,ipc_analyse)
###SMB historique
histo_smb <- histo_smb |>
mutate(DATE = as.Date(DATE))
histo_smb <- mutate_at(histo_smb, vars(2:9), scale_2017t2_histo)
histo_smb <- mutate_at(histo_smb, vars(2:9), scale_2017t2_histo)
###Merge
base_salaires <- left_join(smbs, smbc, by = "DATE")
base_salaires <- left_join(base_salaires, smbpi, by = "DATE")
base_salaires <- left_join(base_salaires, smbe, by = "DATE")
base_salaires <- left_join(base_salaires, smbo, by = "DATE")
base_salaires <- left_join(base_salaires, smb_secteur, by = "DATE")
base_salaires <- left_join(base_salaires, smic_analyse, by = "DATE")
base_salaires <- left_join(base_salaires, ipc_analyse, by = "DATE")
base_salaires <- mutate_if(base_salaires , is.character, as.numeric)
base_salaires_nom<- mutate_at(base_salaires, vars(2:11), scale_2017t2)
base_sal_reel <- mutate_at(base_salaires_nom, vars(2:10),  ~./ipc*100-100)
###Merge histo
base_salaire_histo <- select(base_salaires_nom, DATE,smbs, smbo, smbe, smbpi, smbc,
smb_construction, smb_tertiaire, smb_industrie)
salaire_histo <- rbind(histo_smb, base_salaire_histo) |>
distinct(DATE, .keep_all = TRUE)
ipc_analyse <-  mutate_at(ipc_analyse , vars(-1), scale_2017t2_ipc)
smic_analyse <- mutate_at(smic_analyse, vars(-1), scale_2017t2_smic)
historique_sal_smb_smic <- left_join(smic_analyse, salaire_histo, by = "DATE")
historique_sal_smb_smic <- left_join(historique_sal_smb_smic , ipc_analyse, by = "DATE")
historique_sal_smb_smic <- mutate_at(historique_sal_smb_smic, vars(-1), scale_2005t3)
historique_sal_reel <- mutate_at(historique_sal_smb_smic , vars(2:10),  ~./ipc*100-100)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Evolution du pouvoir d'achat du SMIC et du Salaire mensuel de base depuis la crise du Covid"),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = base_sal_reel,
aes(x = DATE)) +
geom_line(aes(y = smic, color = "SMIC"), size = 1.3) +
geom_line(aes(y = smbs, color = "SMB"), size = 1.3) +
geom_line(aes(y = smbo, color = "SMB Ouvriers"), size = 1) +
geom_line(aes(y = smbe, color = "SMB Employés"), size = 1) +
geom_line(aes(y = smbpi, color = "SMB Professions intermédiaires"), size = 1) +
geom_line(aes(y = smbc, color = "SMB Cadres"), size = 1) +
labs(title = "Evolution du pouvoir d'achat du SMIC et du Salaire mensuel de base depuis la crise du Covid",
subtitle = "Lecture : Au 1er trimestre 2023, le pouvoir d'achat du Salaire mensuel de base recule de 1,4 % par rapport au 2e trimestre 2017. \nSource : Dares (Salaires de base), Insee (Smic mensuel brut, Indice des prix à la consommation) \nCalculs et graphiques : @statjunior",
y = "Variation par rapport au 2e trimestre 2017 (%)", x = "Date") +
scale_x_date(limits = as.Date(c("2017-06-01", NA))) +
scale_color_manual(values = c("SMB"="red", "SMB Cadres" = "orange", "SMIC" = "#C77CFF", "SMB Employés" ="#00BA38", "SMB Ouvriers" = "#00B8E7", "SMB Professions intermédiaires" = "#D39200"))+
theme_grey()+
theme(legend.position="bottom",
legend.title = element_text(size=9),
legend.text = element_text(size=12),
plot.title = element_text(color = "#333333", size = 18, face = "bold"),
plot.subtitle = element_text(color = "#333333", size = 14,face = "italic")) +
ylim(-5,5)
})
}
library(shiny)
library(ggplot2)
# Interface utilisateur
ui <- fluidPage(
plotOutput("plot_salaire_reel")
)
# Serveur
server <- function(input, output) {
output$plot_salaire_reel <- renderPlot({
ggplot(data = base_sal_reel,
aes(x = DATE)) +
geom_line(aes(y = smic, color = "SMIC"), size = 1.3) +
geom_line(aes(y = smbs, color = "SMB"), size = 1.3) +
geom_line(aes(y = smbo, color = "SMB Ouvriers"), size = 1) +
geom_line(aes(y = smbe, color = "SMB Employés"), size = 1) +
geom_line(aes(y = smbpi, color = "SMB Professions intermédiaires"), size = 1) +
geom_line(aes(y = smbc, color = "SMB Cadres"), size = 1) +
labs(title = "Evolution du pouvoir d'achat du SMIC et du Salaire mensuel de base depuis la crise du Covid",
subtitle = "Lecture : Au 1er trimestre 2023, le pouvoir d'achat du Salaire mensuel de base recule de 1,4 % par rapport au 2e trimestre 2017. \nSource : Dares (Salaires de base), Insee (Smic mensuel brut, Indice des prix à la consommation) \nCalculs et graphiques : @statjunior",
y = "Variation par rapport au 2e trimestre 2017 (%)", x = "Date") +
scale_x_date(limits = as.Date(c("2017-06-01", NA))) +
scale_color_manual(values = c("SMB"="red", "SMB Cadres" = "orange", "SMIC" = "#C77CFF", "SMB Employés" ="#00BA38", "SMB Ouvriers" = "#00B8E7", "SMB Professions intermédiaires" = "#D39200"))+
theme_grey()+
theme(legend.position="bottom",
legend.title = element_text(size=9),
legend.text = element_text(size=12),
plot.title = element_text(color = "#333333", size = 18, face = "bold"),
plot.subtitle = element_text(color = "#333333", size = 14,face = "italic")) +
ylim(-5,5)
})
}
# Application Shiny
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
install.packages("shinyWidgets")
library(shiny)
library(shinyWidgets)
library(ggplot2)
# Créer les données
date <- seq(as.Date("2022-01-01"), as.Date("2023-01-01"), by = "month")
value1 <- rnorm(13, 0, 1)
value2 <- rnorm(13, 0, 1)
data <- data.frame(date, value1, value2)
# Définir l'interface
ui <- fluidPage(
titlePanel("Titre du graphique"),
sidebarLayout(
sidebarPanel(
dateInput("date", "Choisir une date", value = min(data$date), min = min(data$date), max = max(data$date), format = "yyyy-mm")
),
mainPanel(
plotOutput("plot")
)
)
)
# Définir le serveur
server <- function(input, output) {
# Filtrer les données en fonction de la date sélectionnée
filtered_data <- reactive({
data %>% filter(date >= input$date & date < input$date + months(1))
})
# Dessiner le graphique
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = date)) +
geom_line(aes(y = value1), color = "blue") +
geom_line(aes(y = value2), color = "red") +
labs(x = "Date", y = "Valeur", title = "Titre du graphique")
})
# Ajouter la valeur du point quand on clique dessus
observeEvent(event_data("plotly_click", source = "plot"), {
if(!is.null(event_data("plotly_click", source = "plot")$x)) {
x <- event_data("plotly_click", source = "plot")$x
y <- event_data("plotly_click", source = "plot")$y
showNotification(paste("Coordonnées : (", x, ", ", y, ")"), type = "message")
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
View(data)
# Définir l'interface
ui <- fluidPage(
titlePanel("Titre du graphique"),
sidebarLayout(
sidebarPanel(
dateInput("date", "Choisir une date", value = min(data$date), min = min(data$date), max = max(data$date), format = "yyyy-mm")
),
mainPanel(
plotOutput("plot")
)
)
)
# Définir le serveur
server <- function(input, output) {
# Filtrer les données en fonction de la date sélectionnée
filtered_data <- reactive({
data %>% filter(date >= input$date & date < input$date + months(1))
})
# Dessiner le graphique
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = date)) +
geom_line(aes(y = value1), color = "blue") +
geom_line(aes(y = value2), color = "red") +
labs(x = "Date", y = "Valeur", title = "Titre du graphique")
})
# Ajouter la valeur du point quand on clique dessus
observeEvent(event_data("plotly_click", source = "plot"), {
if(!is.null(event_data("plotly_click", source = "plot")$x)) {
x <- event_data("plotly_click", source = "plot")$x
y <- event_data("plotly_click", source = "plot")$y
showNotification(paste("Coordonnées : (", x, ", ", y, ")"), type = "message")
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
3
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Evolution du pouvoir d'achat du salaire mensuel de base par secteur d'activité"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dates", "Sélectionnez une période :",
start = as.Date("2017-06-01"), end = as.Date("2023-03-01"),
min = as.Date("2017-06-01"), max = as.Date("2023-03-01"),
separator = " - ", format = "dd-mm-yyyy")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
base_sal_reel_filtered <- base_sal_reel[base_sal_reel$DATE >= input$dates[1] &
base_sal_reel$DATE <= input$dates[2], ]
ggplot(data = base_sal_reel_filtered,
aes(x = DATE)) +
geom_line(aes(y = smb_industrie, color = "SMB Industrie"), size = 1.3) +
geom_line(aes(y = smb_construction, color = "SMB Construction"), size = 1.3) +
geom_line(aes(y = smb_tertiaire, color = "SMB Tertiaire"), size = 1) +
labs(title = "Evolution du pouvoir d'achat du salaire mensuel de base par secteur d'activité",
subtitle = "Lecture : Au 1er trimestre 2023, le pouvoir d'achat du Salaire mensuel de base tertiaire recule de 1,4 % par rapport au 2e trimestre 2017. \nSource : Dares (Salaires de base), Insee (Indice des prix à la consommation) \nCalculs et graphiques : @statjunior",
y = "Variation par rapport au 2e trimestre 2017 (%)", x = "Date") +
scale_x_date(limits = as.Date(c("2017-06-01", NA))) +
scale_color_manual(values = c("SMB Industrie" = "brown", "SMB Construction" = "#C77CFF", "SMB Tertiaire" ="#00BA38"))+
theme_grey()+
theme(legend.position="bottom",
legend.title = element_text(size=9),
legend.text = element_text(size=12),
plot.title = element_text(color = "#333333", size = 18, face = "bold"),
plot.subtitle = element_text(color = "#333333", face = "italic")) +
ylim(-5,5)
})
output$info <- renderText({
point <- nearPoints(base_sal_reel, input$plot_click$x, input$plot_click$y, maxpoints = 1)
if (nrow(point) == 0) return()
paste("Date : ", as.character(point$DATE), "\n",
"SMB Industrie : ", as.character(point$smb_industrie), "\n",
"SMB Construction : ", as.character(point$smb_construction), "\n",
"SMB Tertiaire : ", as.character(point$smb_tertiaire))
})
}
shinyApp(ui = ui, server = server)
View(base_sal_reel)
library(shiny)
library(ggplot2)
library(dplyr)
# Chargement des données
base_sal_reel$DATE <- as.Date(base_sal_reel$DATE)
# Soustraire la première valeur de chaque série par la valeur de la première année affichée
base_sal_reel_adj <- base_sal_reel %>%
mutate_at(vars(2:10), ~ . - .[which.min(DATE) & !is.na(.)])
# Définition de l'interface utilisateur
ui <- fluidPage(
titlePanel("Evolution du pouvoir d'achat du salaire mensuel de base par secteur d'activité"),
sidebarLayout(
sidebarPanel(
dateRangeInput("date_range", label = "Sélectionnez une période :",
start = "2017-06-01", end = "2023-03-01",
min = "2017-06-01", max = "2023-03-01",
separator = " - "),
selectInput("secteur", label = "Sélectionnez un secteur :",
choices = c("Industrie", "Construction", "Tertiaire"))
),
mainPanel(
plotOutput("graph")
)
)
)
# Définition du serveur
server <- function(input, output) {
# Filtrage des données selon les sélections de l'utilisateur
data <- reactive({
base_sal_reel_adj %>%
filter(DATE >= input$date_range[1] & DATE <= input$date_range[2])
})
# Création du graphique
output$graph <- renderPlot({
ggplot(data = data(), aes(x = DATE)) +
geom_line(aes_string(y = paste0("smb_", tolower(input$secteur)), color = paste0("SMB ", input$secteur)), size = 1.3) +
labs(title = "Evolution du pouvoir d'achat du salaire mensuel de base par secteur d'activité",
subtitle = paste("Lecture : Au", format(input$date_range[2], "%B %Y"),
", le pouvoir d'achat du Salaire mensuel de base", input$secteur,
"est en variation de", round(data() %>%
filter(DATE == input$date_range[2]) %>%
pull(!!sym(paste0("smb_", tolower(input$secteur)))), 2),
"par rapport à", format(input$date_range[1], "%B %Y"), ".\n",
"Source : Dares (Salaires de base), Insee (Indice des prix à la consommation)\n",
"Calculs et graphiques : @statjunior"),
y = "Variation par rapport à", x = "Date") +
scale_x_date(limits = as.Date(c(input$date_range[1], NA))) +
scale_color_manual(values = c("SMB Industrie" = "brown", "SMB Construction" = "#C77CFF", "SMB Tertiaire" ="#00BA38"))+
theme_grey()+
theme(legend.position="bottom",
legend.title = element_text(size=9),
legend.text = element_text(size=12),
plot.title = element_text(color = "#333333", size = 18, face = "bold"),
plot.subtitle = element_text(color = "#333333", face = "italic")) +
ylim(-5,5)
})
output$info <- renderText({
point <- nearPoints(base_sal_reel, input$plot_click$x, input$plot_click$y, maxpoints = 1)
if (nrow(point) == 0) return()
paste("Date : ", as.character(point$DATE), "\n",
"SMB Industrie : ", as.character(point$smb_industrie), "\n",
"SMB Construction : ", as.character(point$smb_construction), "\n",
"SMB Tertiaire : ", as.character(point$smb_tertiaire))
})
}
shinyApp(ui = ui, server = server)
